//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/SkiGameInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @SkiGameInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @SkiGameInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""SkiGameInputActions"",
    ""maps"": [
        {
            ""name"": ""GamePlay"",
            ""id"": ""caf2b3a9-ccdf-4039-80c7-4c2914fd2a1a"",
            ""actions"": [
                {
                    ""name"": ""Boost"",
                    ""type"": ""Button"",
                    ""id"": ""2e46b7a5-5fff-4546-8a87-de7fb4292db5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Flip"",
                    ""type"": ""Button"",
                    ""id"": ""c97307d8-b331-4939-a714-56e13915d2d0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Spin"",
                    ""type"": ""Button"",
                    ""id"": ""af5473aa-3d17-43ce-a308-6b8b16484fdf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightTurn"",
                    ""type"": ""Button"",
                    ""id"": ""f4be77e8-5fe1-4391-af54-95bd1bbd9a09"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftTurn"",
                    ""type"": ""Button"",
                    ""id"": ""b36bcd28-8a0e-4fc7-90f3-47a5d8932953"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleView"",
                    ""type"": ""Button"",
                    ""id"": ""79bc136f-6450-4729-a709-5635173ac3fd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""50e6f6aa-e245-4079-bd55-6974b15caf88"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Boost"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""38e1c9ae-c771-4a31-a3d4-522ef472133a"",
                    ""path"": ""<XRController>{LeftHand}/{PrimaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Boost"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8810bcc4-fdd8-47cf-b5ff-5d043072b177"",
                    ""path"": ""<XRController>{RightHand}/{PrimaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Boost"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b4ab3ab2-79cb-4e1b-9591-0dbf965727b5"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Flip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8f43e396-c947-4300-aeb5-67eaf957b639"",
                    ""path"": ""<XRController>{RightHand}/{SecondaryTrigger}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Flip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""18a3491b-a25f-40c1-9783-df0bad22ed78"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Spin"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a7ded499-cb51-4fc5-b914-aaed2c7e56b4"",
                    ""path"": ""<XRController>{LeftHand}/{SecondaryTrigger}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Spin"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""97542ff3-cbc8-46cf-a154-7d391115f77e"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightTurn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""07b41e9f-a8ed-4995-8274-afbdb28c524b"",
                    ""path"": ""<XRController>{RightHand}/{PrimaryTrigger}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightTurn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c0188551-7856-4245-a630-4d1beac669fb"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftTurn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8939dba7-dc2e-4610-af4c-581e9a8c6f00"",
                    ""path"": ""<XRController>{LeftHand}/{PrimaryTrigger}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftTurn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""994822d5-bf99-4a04-9b00-329a4edb394e"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleView"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a1e65244-1b97-46e9-91d4-2d847a1fe8eb"",
                    ""path"": ""<XRController>{RightHand}/{SecondaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleView"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a03139eb-8d13-46df-9372-ff67844bac77"",
                    ""path"": ""<XRController>{LeftHand}/{SecondaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleView"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GamePlay
        m_GamePlay = asset.FindActionMap("GamePlay", throwIfNotFound: true);
        m_GamePlay_Boost = m_GamePlay.FindAction("Boost", throwIfNotFound: true);
        m_GamePlay_Flip = m_GamePlay.FindAction("Flip", throwIfNotFound: true);
        m_GamePlay_Spin = m_GamePlay.FindAction("Spin", throwIfNotFound: true);
        m_GamePlay_RightTurn = m_GamePlay.FindAction("RightTurn", throwIfNotFound: true);
        m_GamePlay_LeftTurn = m_GamePlay.FindAction("LeftTurn", throwIfNotFound: true);
        m_GamePlay_ToggleView = m_GamePlay.FindAction("ToggleView", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GamePlay
    private readonly InputActionMap m_GamePlay;
    private List<IGamePlayActions> m_GamePlayActionsCallbackInterfaces = new List<IGamePlayActions>();
    private readonly InputAction m_GamePlay_Boost;
    private readonly InputAction m_GamePlay_Flip;
    private readonly InputAction m_GamePlay_Spin;
    private readonly InputAction m_GamePlay_RightTurn;
    private readonly InputAction m_GamePlay_LeftTurn;
    private readonly InputAction m_GamePlay_ToggleView;
    public struct GamePlayActions
    {
        private @SkiGameInputActions m_Wrapper;
        public GamePlayActions(@SkiGameInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Boost => m_Wrapper.m_GamePlay_Boost;
        public InputAction @Flip => m_Wrapper.m_GamePlay_Flip;
        public InputAction @Spin => m_Wrapper.m_GamePlay_Spin;
        public InputAction @RightTurn => m_Wrapper.m_GamePlay_RightTurn;
        public InputAction @LeftTurn => m_Wrapper.m_GamePlay_LeftTurn;
        public InputAction @ToggleView => m_Wrapper.m_GamePlay_ToggleView;
        public InputActionMap Get() { return m_Wrapper.m_GamePlay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GamePlayActions set) { return set.Get(); }
        public void AddCallbacks(IGamePlayActions instance)
        {
            if (instance == null || m_Wrapper.m_GamePlayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GamePlayActionsCallbackInterfaces.Add(instance);
            @Boost.started += instance.OnBoost;
            @Boost.performed += instance.OnBoost;
            @Boost.canceled += instance.OnBoost;
            @Flip.started += instance.OnFlip;
            @Flip.performed += instance.OnFlip;
            @Flip.canceled += instance.OnFlip;
            @Spin.started += instance.OnSpin;
            @Spin.performed += instance.OnSpin;
            @Spin.canceled += instance.OnSpin;
            @RightTurn.started += instance.OnRightTurn;
            @RightTurn.performed += instance.OnRightTurn;
            @RightTurn.canceled += instance.OnRightTurn;
            @LeftTurn.started += instance.OnLeftTurn;
            @LeftTurn.performed += instance.OnLeftTurn;
            @LeftTurn.canceled += instance.OnLeftTurn;
            @ToggleView.started += instance.OnToggleView;
            @ToggleView.performed += instance.OnToggleView;
            @ToggleView.canceled += instance.OnToggleView;
        }

        private void UnregisterCallbacks(IGamePlayActions instance)
        {
            @Boost.started -= instance.OnBoost;
            @Boost.performed -= instance.OnBoost;
            @Boost.canceled -= instance.OnBoost;
            @Flip.started -= instance.OnFlip;
            @Flip.performed -= instance.OnFlip;
            @Flip.canceled -= instance.OnFlip;
            @Spin.started -= instance.OnSpin;
            @Spin.performed -= instance.OnSpin;
            @Spin.canceled -= instance.OnSpin;
            @RightTurn.started -= instance.OnRightTurn;
            @RightTurn.performed -= instance.OnRightTurn;
            @RightTurn.canceled -= instance.OnRightTurn;
            @LeftTurn.started -= instance.OnLeftTurn;
            @LeftTurn.performed -= instance.OnLeftTurn;
            @LeftTurn.canceled -= instance.OnLeftTurn;
            @ToggleView.started -= instance.OnToggleView;
            @ToggleView.performed -= instance.OnToggleView;
            @ToggleView.canceled -= instance.OnToggleView;
        }

        public void RemoveCallbacks(IGamePlayActions instance)
        {
            if (m_Wrapper.m_GamePlayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGamePlayActions instance)
        {
            foreach (var item in m_Wrapper.m_GamePlayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GamePlayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GamePlayActions @GamePlay => new GamePlayActions(this);
    public interface IGamePlayActions
    {
        void OnBoost(InputAction.CallbackContext context);
        void OnFlip(InputAction.CallbackContext context);
        void OnSpin(InputAction.CallbackContext context);
        void OnRightTurn(InputAction.CallbackContext context);
        void OnLeftTurn(InputAction.CallbackContext context);
        void OnToggleView(InputAction.CallbackContext context);
    }
}
